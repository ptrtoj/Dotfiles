#+TITLE: JEMACS
#+PROPERTY: header-args:elisp :tangle ./init.el
#+STARTUP: show2levels

* Jeon's Extreme Minimal CTRL + ALT + SHIFT
Really trying to add only the things I 'require' but time to time, some packages were added with no specific needs.

** Basics
#+BEGIN_SRC elisp
  (use-package emacs
    :custom
    (user-full-name "WooHyoung Jeon")
    (user-mail-address "jeon@ptrtoj.com")
    (use-short-answers t)
    (inhibit-startup-screen t)
    (visible-bell t))
#+END_SRC

** Prevent Emacs Generating 'custom.el'
#+BEGIN_SRC elisp
  (use-package cus-edit
    :custom
    (custom-file (concat user-emacs-directory "custom.el"))
    (when (file-exists-p custom-file)
      (load custom-file)))
#+END_SRC

** Package Manager
*** Init
(Moved 'package-refresh-contents' to 'auto-package-update' config section)
#+BEGIN_SRC elisp
  (use-package package
    :config
    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
    (package-initialize)
    (unless package-archive-contents
      (package-refresh-contents)))
#+END_SRC

*** TODO Automatically Update Package List and Upgrade Packages
#+BEGIN_SRC elisp :tangle no
  (use-package auto-package-update
    :ensure t
    :bind
    ("C-c u p" . package-refresh-contents) 	; provided from 'package' itself
    ("C-c u g" . auto-package-update-now-async) ; provided from 'auto-package-update' package
    :custom
    (setq auto-package-update-prompt-before-update t)
    (setq auto-package-update-delete-old-versions t))
#+END_SRC

** Fix MacOS Shell Path Problem

#+BEGIN_SRC elisp
  (use-package exec-path-from-shell
    :ensure t
    :custom
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)))
#+END_SRC

** Git
#+BEGIN_SRC elisp
  (use-package magit
    :ensure t
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
    #+END_SRC
** UI Section
*** Fonts and Transparent Frames
#+BEGIN_SRC elisp 
  (use-package faces
    :config
    (set-face-attribute 'font-lock-keyword-face nil :weight 'bold)
    ;;(set-face-attribute 'font-lock-comment-face nil :slant 'italic)
    (add-to-list 'default-frame-alist '(font . "Berkeley Mono"))

    ;; fullscreen on startup
    ;;(add-to-list 'default-frame-alist '(fullscreen . maximized))

    ;; or set default width and height
    ;;(add-to-list 'default-frame-alist (cons 'width 120))
    ;;(add-to-list 'default-frame-alist (cons 'height 70))

    ;; transparency
    ;; Emacs 29 introduced below, but doesn't work on Macos.
    ;;(set-frame-parameter nil 'alpha-background 90)
    ;;(add-to-list 'default-frame-alist '(alpha-background . 90))

    ;; Rather this works (the old way).
    (set-frame-parameter (selected-frame) 'alpha '(95 95))
    (add-to-list 'default-frame-alist '(alpha 95 95)))

  ;; [DOES NOT WORK] Blur the background
  ;;(set-face-background 'default "mac:windowBackgroundColor")
  ;;(set-face-stipple 'default "alpha:30%"))
#+END_SRC

*** Disable Tool Bar
#+BEGIN_SRC elisp
  (use-package tool-bar
    :config
    (tool-bar-mode -1))
#+END_SRC

*** Disable Scroll Bar
#+BEGIN_SRC elisp
  (use-package scroll-bar
    :config
    (scroll-bar-mode 0))
#+END_SRC

*** Show Line Numbers
#+BEGIN_SRC elisp
  (use-package display-line-numbers
    :custom
    (display-line-numbers-type 'relative)

    ;; prevent right shift when carry occurs (90->100)
    (display-line-numbers-width-start t)

    :hook
    (prog-mode . display-line-numbers-mode)
    ;;(markdown-mode . display-line-numbers-mode)

    ;; org-mode should be explicitly enabled
    ;; prog-mode doesn't enable org-mode in this mode
    (org-mode . display-line-numbers-mode))
#+END_SRC

*** TODO Show Column Number
#+BEGIN_SRC elisp :tangle no
  (use-package simple
    :config
    (column-number-mode 1))
#+END_SRC

*** Show Max Column Indicator
#+BEGIN_SRC elisp
  (use-package display-fill-column-indicator
    :hook
    (prog-mode . display-fill-column-indicator-mode)
    (org-mode . display-fill-column-indicator-mode))
#+END_SRC

*** Color Theme
#+BEGIN_SRC elisp 
  (use-package catppuccin-theme
    :ensure t
    :config
    (load-theme 'catppuccin t)
    (setq catppuccin-flavor 'latte)
    (catppuccin-reload))
#+END_SRC

** TODO Not Migrated Yet
#+BEGIN_SRC elisp :tangle no
  ;;; Diminish
  (use-package diminish
    :ensure t)

  ;;; Eglot
  (use-package eglot
    :hook
    (prog-mode . eglot-ensure))

  ;;; Flymake
  (use-package flymake
    :bind (:map flymake-mode-map
		("M-n" . 'flymake-goto-next-error)
		("M-p" . 'flymake-goto-prev-error)))

  ;;; Editor Config
  (use-package editorconfig
    :ensure t
    :config
    (editorconfig-mode 1))

  ;;; Which-key
  (use-package which-key
    :ensure t
    :diminish
    :config
    (which-key-mode t))

  ;;; Company
  (use-package company
    :ensure t
    :config
    (setq company-tooltip-align-annotations t)
    :hook
    (after-init . global-company-mode))

  ;;; Vertico
  (use-package vertico
    :ensure t
    :init
    (vertico-mode))

  ;;; Orderless
  (use-package orderless
    :ensure t
    :custom
    (completion--styles '(oderless basic))
    (completion-category-defaults nil)
    (completion--category-overrides '((file (styles partial-completion)))))

  ;;; Marginalia
  (use-package marginalia
    :ensure t
    :init
    (marginalia-mode))

  ;;; Files
  (use-package files
    :config
    (setq safe-local-variable-values
	  '((eval outline-hide-body)
	    (outline-minor-mode-cycle . t)))
    :custom
    ;; Prevent Emacs Generating Backup
    (make-backup-files nil))

  ;;; Recent Files
  (use-package recentf
    ;; 'C-x C-r' was 'find-file-read-only'
    ;; :bind
    ;; ("C-x C-r" . recentf-open-files)
    :config
    (recentf-mode 1))

  ;;; Remember Recent Command History
  (use-package savehist
    :config
    (savehist-mode 1))

  ;;; Remember Last Cursor Postion from File
  (use-package saveplace
    :config
    (save-place-mode 1))

  ;;; Highlight Current Cursor Line
  (use-package hl-line
    :config
    (global-hl-line-mode 1))

  ;;; Delete Selection as I Type
  (use-package delsel
    :config
    (delete-selection-mode 1))

  ;;; Automatically Match Parenthesis
  (use-package elec-pair
    :hook
    (prog-mode . electric-pair-mode)
    (org-mode . electric-pair-mode))

  ;;; [X] Revert Buffer Automatically
  ;; Dropped. Don't think I *REALLY* need this feature, yet.
  ;; However, I want to diminish the minor mode section.
  ;; (use-package autorevert
  ;;   :diminish (auto-revert-mode)
  ;; :config
  ;; (global-auto-revert-mode t))

  ;;; Clean Whitespaces
  (use-package whitespace
    ;; show whitespace with colors
    ;;:custom
    ;;(whitespace-style '(face tabs tab-mark trailing))
    ;;(custom-set-faces '(whitespace-tab ((t (:foreground "#020202")))))
    :hook
    ;;(prog-mode . whitespace-mode)
    (before-save . whitespace-cleanup))

  ;;; Spellcheck
  ;; Dependencies for Flyspell
  ;; - aspell (or hunspell)
  ;; - And also dictionary files if you chose to use hunspell
  ;; - '*.aff' && '*.dic' (e.g. 'en_US.aff' and 'en_US.dic')
  ;;
  ;; Dictionary files should be placed in '/USER_HOME_DIR/Library/Spelling/' or '/Library/Spelling/'.
  ;;
  ;; Homebrew itself doesn't provide dictionaries for spell-checkers
  ;; but you can download compatible dictionaries from other sources,
  ;; such as, from here (https://cgit.freedesktop.org/libreoffice/dictionaries/tree/).
  ;;
  ;;   $ cd ~/Library/Spelling/
  ;;   $ wget https://github.com/ropensci/hunspell/raw/master/inst/dict/en_US.aff
  ;;   $ wget https://github.com/ropensci/hunspell/raw/master/inst/dict/en_US.dic
  (use-package flyspell
    :diminish
    ;;:config
    ;;(setq ispell-program-name "hunspell")
    ;;(setq ispell-local-dictionary "en_US")
    :hook
    (find-file . flyspell-buffer)
    (text-mode . flyspell-mode)
    ;;(org-mode . flyspell-prog-mode))
    (prog-mode . flyspell-prog-mode))

  ;;; Show URLs as a Clickable Link
  (use-package goto-addr
    :hook
    (prog-mode . goto-address-prog-mode)
    (text-mode . goto-address-prog-mode))
#+END_SRC

;; Local Variables: 
;; eval: (add-hook 'after-save-hook (lambda ()(if (y-or-n-p "Reload?")(load-file user-init-file))) nil t) 
;; eval: (add-hook 'after-save-hook (lambda ()(if (y-or-n-p "Tangle?")(org-babel-tangle))) nil t) 
;; End:
